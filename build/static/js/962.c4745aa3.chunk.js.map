{"version":3,"file":"static/js/962.c4745aa3.chunk.js","mappings":"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","sources":["pages/auth/VerifyCode.js","sections/auth/verify-code/VerifyCodeForm.js"],"sourcesContent":["import { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Link, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport Iconify from '../../components/Iconify';\n// sections\nimport { VerifyCodeForm } from '../../sections/auth/verify-code';\nimport useResponsive from '../../hooks/useResponsive';\nimport AuthImageList from './AuthImageList';\n\n// ----------------------------------------------------------------------\nconst RootStyle = styled('div')(({ theme }) => ({\n  [theme.breakpoints.up('md')]: {\n    display: 'flex',\n  },\n}));\n\n\nconst ContentStyle = styled('div')(({ theme }) => ({\n  maxWidth: 430,\n  display: 'flex',\n  minHeight: '100vh',\n  flexDirection: 'column',\n  padding: theme.spacing(12, 6),\n  margin: 'auto',\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function VerifyCode() {\n  const mdUp = useResponsive('up', 'md');\n\n  return (\n    <Page title=\"Verify\" sx={{ height: 1 }}>\n      <RootStyle>\n        <LogoOnlyLayout />\n\n        <ContentStyle>\n          <Box sx={{ maxWidth: 420, mx: 'auto' }}>\n            <Button\n              size=\"small\"\n              component={RouterLink}\n              to={PATH_AUTH.login}\n              startIcon={<Iconify icon={'eva:arrow-ios-back-fill'} width={20} height={20} />}\n              sx={{ mb: 3 }}\n            >\n              Back\n            </Button>\n\n            <Typography variant=\"h3\" paragraph>\n              Please check your email!\n            </Typography>\n            <Typography sx={{ color: 'text.secondary' }}>\n              We have emailed a 6-digit confirmation code to acb@domain, please enter the code in below box to verify\n              your email.\n            </Typography>\n\n            <Box sx={{ mt: 5, mb: 3 }}>\n              <VerifyCodeForm />\n            </Box>\n\n            <Typography variant=\"body2\" align=\"center\">\n              Donâ€™t have a code? &nbsp;\n              <Link variant=\"subtitle2\" underline=\"none\" onClick={() => {}}>\n                Resend code\n              </Link>\n            </Typography>\n          </Box>\n        </ContentStyle>\n        {mdUp && <AuthImageList />}\n      </RootStyle>\n    </Page>\n  );\n}\n","import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\n// form\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { OutlinedInput, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n\n// ----------------------------------------------------------------------\n\nexport default function VerifyCodeForm() {\n  const navigate = useNavigate();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.string().required('Code is required'),\n    code2: Yup.string().required('Code is required'),\n    code3: Yup.string().required('Code is required'),\n    code4: Yup.string().required('Code is required'),\n    code5: Yup.string().required('Code is required'),\n    code6: Yup.string().required('Code is required'),\n  });\n\n  const defaultValues = {\n    code1: '',\n    code2: '',\n    code3: '',\n    code4: '',\n    code5: '',\n    code6: '',\n  };\n\n  const {\n    watch,\n    control,\n    setValue,\n    handleSubmit,\n    formState: { isSubmitting, isValid },\n  } = useForm({\n    mode: 'onBlur',\n    resolver: yupResolver(VerifyCodeSchema),\n    defaultValues,\n  });\n\n  const values = watch();\n\n  useEffect(() => {\n    document.addEventListener('paste', handlePasteClipboard);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onSubmit = async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.log('code:', Object.values(data).join(''));\n\n      enqueueSnackbar('Verify success!');\n\n      navigate(PATH_DASHBOARD.root, { replace: true });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handlePasteClipboard = (event) => {\n    let data = event?.clipboardData?.getData('Text') || '';\n\n    data = data.split('');\n\n    [].forEach.call(document.querySelectorAll('#field-code'), (node, index) => {\n      node.value = data[index];\n      const fieldIndex = `code${index + 1}`;\n      setValue(fieldIndex, data[index]);\n    });\n  };\n\n  const handleChangeWithNextField = (event, handleChange) => {\n    const { maxLength, value, name } = event.target;\n    const fieldIndex = name.replace('code', '');\n\n    const fieldIntIndex = Number(fieldIndex);\n\n    if (value.length >= maxLength) {\n      if (fieldIntIndex < 6) {\n        const nextfield = document.querySelector(`input[name=code${fieldIntIndex + 1}]`);\n\n        if (nextfield !== null) {\n          nextfield.focus();\n        }\n      }\n    }\n\n    handleChange(event);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\n        {Object.keys(values).map((name, index) => (\n          <Controller\n            key={name}\n            name={`code${index + 1}`}\n            control={control}\n            render={({ field }) => (\n              <OutlinedInput\n                {...field}\n                id=\"field-code\"\n                autoFocus={index === 0}\n                placeholder=\"-\"\n                onChange={(event) => handleChangeWithNextField(event, field.onChange)}\n                inputProps={{\n                  maxLength: 1,\n                  sx: {\n                    p: 0,\n                    textAlign: 'center',\n                    width: { xs: 36, sm: 56 },\n                    height: { xs: 36, sm: 56 },\n                  },\n                }}\n              />\n            )}\n          />\n        ))}\n      </Stack>\n\n      <LoadingButton\n        fullWidth\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        disabled={!isValid}\n        sx={{ mt: 3 }}\n      >\n        Verify\n      </LoadingButton>\n    </form>\n  );\n}\n"],"names":["RootStyle","styled","_ref","theme","_defineProperty","breakpoints","up","display","ContentStyle","_ref3","maxWidth","minHeight","flexDirection","padding","spacing","margin","VerifyCode","mdUp","useResponsive","_jsx","Page","title","sx","height","children","_jsxs","LogoOnlyLayout","Box","mx","Button","size","component","RouterLink","to","PATH_AUTH","startIcon","Iconify","icon","width","mb","Typography","variant","paragraph","color","mt","VerifyCodeForm","align","Link","underline","onClick","AuthImageList","navigate","useNavigate","enqueueSnackbar","useSnackbar","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","_useForm","useForm","mode","resolver","yupResolver","defaultValues","watch","control","setValue","handleSubmit","_useForm$formState","formState","isSubmitting","isValid","values","useEffect","document","addEventListener","handlePasteClipboard","onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","Promise","resolve","setTimeout","console","log","Object","join","PATH_DASHBOARD","replace","t0","error","stop","_x","apply","arguments","event","_event$clipboardData","clipboardData","getData","split","forEach","call","querySelectorAll","node","index","value","fieldIndex","concat","Stack","direction","justifyContent","keys","map","name","Controller","render","_ref2","field","OutlinedInput","_objectSpread","id","autoFocus","placeholder","onChange","handleChange","_event$target","target","maxLength","fieldIntIndex","Number","length","nextfield","querySelector","focus","handleChangeWithNextField","inputProps","p","textAlign","xs","sm","LoadingButton","fullWidth","type","loading","disabled"],"sourceRoot":""}