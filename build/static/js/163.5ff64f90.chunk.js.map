{"version":3,"file":"static/js/163.5ff64f90.chunk.js","mappings":"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","sources":["sections/auth/reset-password/ResetPasswordForm.js","pages/auth/ResetPassword.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport * as Yup from 'yup';\n// form\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\n// @mui\nimport { Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// hooks\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n// components\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\n\n// ----------------------------------------------------------------------\n\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func,\n};\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n  });\n\n  const methods = useForm({\n    resolver: yupResolver(ResetPasswordSchema),\n    defaultValues: { email: 'demo@minimals.cc' },\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      if (isMountedRef.current) {\n        onSent();\n        onGetEmail(data.email);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        <RHFTextField name=\"email\" label=\"Email address\" />\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n          Reset Password\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n}\n","import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\n// sections\nimport { ResetPasswordForm } from '../../sections/auth/reset-password';\n// assets\nimport { SentIcon } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState('');\n  const [sent, setSent] = useState(false);\n\n  return (\n    <Page title=\"Reset Password\" sx={{ height: 1 }}>\n      <RootStyle>\n        <LogoOnlyLayout />\n\n        <Container>\n          <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n            {!sent ? (\n              <>\n                <Typography variant=\"h3\" paragraph>\n                  Forgot your password?\n                </Typography>\n                <Typography sx={{ color: 'text.secondary', mb: 5 }}>\n                  Please enter the email address associated with your account and We will email you a link to reset your\n                  password.\n                </Typography>\n\n                <ResetPasswordForm onSent={() => setSent(true)} onGetEmail={(value) => setEmail(value)} />\n\n                <Button fullWidth size=\"large\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 1 }}>\n                  Back\n                </Button>\n              </>\n            ) : (\n              <Box sx={{ textAlign: 'center' }}>\n                <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\n\n                <Typography variant=\"h3\" gutterBottom>\n                  Request sent successfully\n                </Typography>\n                <Typography>\n                  We have sent a confirmation email to &nbsp;\n                  <strong>{email}</strong>\n                  <br />\n                  Please check your email.\n                </Typography>\n\n                <Button size=\"large\" variant=\"contained\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 5 }}>\n                  Back\n                </Button>\n              </Box>\n            )}\n          </Box>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"],"names":["ResetPasswordForm","_ref","onSent","onGetEmail","isMountedRef","useIsMountedRef","ResetPasswordSchema","Yup","shape","email","required","methods","useForm","resolver","yupResolver","defaultValues","handleSubmit","isSubmitting","formState","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","Promise","resolve","setTimeout","current","t0","console","error","stop","_x","apply","arguments","_jsx","FormProvider","children","_jsxs","Stack","spacing","RHFTextField","name","label","LoadingButton","fullWidth","size","type","variant","loading","RootStyle","styled","display","minHeight","alignItems","justifyContent","padding","theme","ResetPassword","_useState","useState","_useState2","_slicedToArray","setEmail","_useState3","_useState4","sent","setSent","Page","title","sx","height","LogoOnlyLayout","Container","Box","maxWidth","mx","textAlign","SentIcon","mb","Typography","gutterBottom","Button","component","RouterLink","to","PATH_AUTH","mt","_Fragment","paragraph","color","value"],"sourceRoot":""}